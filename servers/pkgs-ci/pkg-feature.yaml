################################################################################
# Job Templates
################################################################################

- job-template:
    name: '{project-version}-pkg-{project-name}-build-{os}-{distro}'
    concurrent: True
    description: |
        This job builds a package and then publishes it by triggerring publisher job.<br>
        After publishing are triggered test jobs:
        <ul>
          <li> install test for just built packages
          <li> system test using just built packages
        </ul>

    scm:
      - perestroika:
          branch: '{perestroika-branch}'
    parameters:
      - gerrit
    properties:
      - inject:
          properties-content: |
            PROJECT_NAME={project-name}
            PROJECT_VERSION={project-version}

            IS_UPDATES={is-updates}

            DIST={distro}
            PKG_TYPE={pkg_type}

            REMOTE_REPO_HOST={publish-repo-host}
            REPO_REQUEST_PATH_PREFIX=review/

            SRC_PROJECT_PATH=openstack
            SPEC_PROJECT_PATH=openstack-build
            SPEC_PROJECT_SUFFIX=-build
            SPEC_PREFIX_PATH={spec_prefix_path}

            BASE_RPM_REPO_PATH={mos-rpm-repo-path}
            BASE_DEB_REPO_PATH={mos-deb-repo-path}
            DEB_DIST_NAME={deb-dist-name}

            GERRIT_HOST={gerrit-host}
            GERRIT_PORT={gerrit-port}
            GERRIT_USER={gerrit-user}

            ADDITIONAL_EXTRAREPO_DEB=http://{publish-repo-host}{deb-repo-path}/{project-version} {deb-dist-name} main restricted
            ADDITIONAL_EXTRAREPO_RPM=deps,http://{publish-repo-host}{rpm-repo-path}/os/x86_64

    wrappers:
      - ssh-agent-credentials:
          users:
            - '{ssh-creds-openstack-ci-jenkins}'
            - '{ssh-creds-fuel-osci-bot}'
            - '{ssh-creds-pkgs-ci}'
      - timeout:
          timeout: 300
      - timestamps
      - ansicolor
    triggers:
      - zuul
    builders:
      - shell: |
          #!/bin/bash -xe

          # FIXME: use perestroika from openstack/fuel-mirror
          # checkout fuel-mirror to ${{WORKSPACE}}/fuel-mirror
          # and then copy perestroika directory to root ${{WORKSPACE}}
          cp -rv ${{WORKSPACE}}/fuel-mirror/perestroika/* ${{WORKSPACE}}

      - inject:
          properties-content: |
            GUESS_MIRROR={guess-mirror}
            MIRROR_HOST={mirror_host}
            UBUNTU_MIRROR_URL={ubuntu_mirror_url}
            MIRROR_UBUNTU={mirror_ubuntu}

      - guess-mirror
      - shell:
          !include-raw-escape:
            'builders/pkg_build.sh'
    publishers:
      - email-alert-on-merge
      - junit:
          results: 'buildresult.xml'
      - archive:
          artifacts: 'buildresult.params, buildresult.xml, tests.envfile'
          allow-empty: True
      - post-tasks:
        - matches:
            - log-text: 'Started'
          run-if-job-successful: true
          script: rm -rf *

    node: '{build-node}'

- job-template:
    name: '{project-version}-pkg-{project-name}-publish-{os}-{distro}'
    project-type: freestyle
    concurrent: false
    quiet-period: 60
    parameters:
      - gerrit
    properties:
      - inject:
          properties-content: |
            PROJECT_NAME={project-name}
            PROJECT_VERSION={project-version}

            IS_UPDATES={is-updates}

            IS_DOWNGRADE={is-downgrade}

            DIST={distro}
            REPO_TYPE={pkg_type}

            SIGKEYID={pkg-sign-key}

            REMOTE_REPO_HOST={publish-repo-host}
            REPO_REQUEST_PATH_PREFIX=review/
            REPO_BASE_PATH={repo-base-path}

            DEB_REPO_PATH={deb-repo-path}/{project-version}
            DEB_DIST_NAME={deb-dist-name}
            DEB_PROPOSED_DIST_NAME={deb-dist-name}-proposed
            DEB_UPDATES_DIST_NAME={deb-dist-name}-updates
            DEB_SECURITY_DIST_NAME={deb-dist-name}-security
            DEB_HOLDBACK_DIST_NAME={deb-dist-name}-holdback

            RPM_OS_REPO_PATH={rpm-repo-path}/os
            RPM_UPDATES_REPO_PATH={rpm-repo-path}/updates
            RPM_PROPOSED_REPO_PATH={rpm-repo-path}/proposed
            RPM_SECURITY_REPO_PATH={rpm-repo-path}/security
            RPM_HOLDBACK_REPO_PATH={rpm-repo-path}/holdback

            DEB_ORIGIN_RELEASE={deb-origin-release}
            DEB_ORIGIN_TEST={deb-origin-test}

            PKG_JSON_REPORT=/home/jenkins/{project-version}-pkg-{project-name}-versions.json
    wrappers:
      - ssh-agent-credentials:
          users:
            - '{ssh-creds-jenkins}'
      - timestamps
      - ansicolor
    triggers:
      - zuul
    scm:
      - perestroika:
          branch: 'stable/mitaka'

    builders:

      # This is done for flexibility.
      # We could trigger this job with gerrit parameters and get corresponding artifact.
      # Or we could trigger this job and pass required fields as parameters, so artifact won't be needed
      # 1. remove existing file
      - shell: rm -vf 'buildresult.params'
      # 2. try to copy artifact
      - copyartifact:
          project: '{project-version}-pkg-{project-name}-build-{os}-{distro}'
          filter: 'buildresult.params'
          which-build: last-successful
          parameter-filters: GERRIT_CHANGE_NUMBER=${{GERRIT_CHANGE_NUMBER}},GERRIT_PATCHSET_NUMBER=${{GERRIT_PATCHSET_NUMBER}}
          optional: true
      # 3. touch it, so the file will exist in all cases
      - shell: touch 'buildresult.params'
      # 4. inject file's content: artifact data or nothing
      - inject-properties-file:
          # Inject
          # - useful:
          #     BUILD_HOST
          #     PKG_PATH
          # - unuseful:
          #     DIST
          #     REPO_TYPE
          #     GERRIT_CHANGE_STATUS
          # - maybe useful:
          #     EXTRAREPO
          #     REQUEST_NUM
          #     LP_BUG
          #     IS_SECURITY
          properties-file: 'buildresult.params'

      - shell:
          !include-raw-escape:
            'builders/pkg_publish.sh'

    publishers:
      - pkg-version-report
      - archive:
           artifacts: '{pkg_type}.publish.setenvfile, tests.envfile'
           allow-empty: true

    node: '{publish-node}'

- job-template:
    name: '{project-version}-pkg-{project-name}-install-{os}-{distro}'
    project-type: freestyle
    concurrent: true
    parameters:
      - gerrit
    properties:
      - inject:
          # fixme: REPO_TYPE will be injected later
          # fixme: DIST will be injected later as DEB_DISTRO or RPM_DISTRO
          properties-content: |
            DIST={distro}
            REPO_TYPE={pkg_type}
            IS_DOWNGRADE={is-downgrade}
            ADDITIONAL_EXTRAREPO_DEB=
            ADDITIONAL_EXTRAREPO_RPM=
    wrappers:
      - ssh-agent-credentials:
          users:
            - '{ssh-creds-openstack-ci-jenkins}'
            - '{ssh-creds-install-vm-trusty-root}'
            - '{ssh-creds-install-vm-centos7-root}'
      - pre-scm-buildstep:
        - shell: 'rm -rf ${{WORKSPACE?}}/*'
      - timestamps
      - ansicolor
    triggers:
      - zuul

    scm:
      - fuel-infra:
          username: '{username-openstack-ci-jenkins}'
          credentials-id: '{ssh-creds-openstack-ci-jenkins}'
          repo: '{install-scm-repo}'
          branch: '{install-scm-branch}'
          basedir: ''
      - git:
          url: 'https://review.fuel-infra.org/packaging/runtests'
          basedir: 'runtests'
          skip-tag: true
          browser: gitweb
          browser-url: 'https://review.fuel-infra.org/gitweb?p=packaging/runtests.git'

    builders:

      - shell: |
          #!/bin/bash
          set -ex
          git -C runtests checkout "${{GERRIT_BRANCH?}}" || rm -rf runtests

      - shell:
          !include-raw-escape:
            'builders/mos.install.cleanup.sh'

      # This is done for flexibility.
      # We could trigger this job with gerrit parameters and get corresponding artifact.
      # Or we could trigger this job and pass required fields as parameters, so artifact won't be needed
      # 1. remove existing file
      - shell: rm -vf 'buildresult.params'
      # 2. try to copy artifact
      - copyartifact:
          project: '{project-version}-pkg-{project-name}-build-{os}-{distro}'
          filter: 'buildresult.params'
          which-build: last-successful
          parameter-filters: GERRIT_CHANGE_NUMBER=${{GERRIT_CHANGE_NUMBER}},GERRIT_PATCHSET_NUMBER=${{GERRIT_PATCHSET_NUMBER}}
          optional: true
      # 3. touch it, so the file will exist in all cases
      - shell: touch 'buildresult.params'
      # 4. inject file's content: artifact data or nothing
      - inject-properties-file:
          # Inject
          # - useful:
          #     BUILD_HOST
          #     PKG_PATH
          # - unuseful:
          #     DIST
          #     REPO_TYPE
          #     GERRIT_CHANGE_STATUS
          # - maybe useful:
          #     EXTRAREPO
          #     REQUEST_NUM
          #     LP_BUG
          #     IS_SECURITY
          properties-file: 'buildresult.params'

      - copyartifact:
          project: '{project-version}-pkg-{project-name}-publish-{os}-{distro}'
          filter: '{pkg_type}.publish.setenvfile'
          which-build: last-successful
          parameter-filters: GERRIT_CHANGE_NUMBER=${{GERRIT_CHANGE_NUMBER}},GERRIT_PATCHSET_NUMBER=${{GERRIT_PATCHSET_NUMBER}}
          optional: true
      - shell: touch '{pkg_type}.publish.setenvfile'
      - inject-properties-file:
          # Injects package lists with version and repository URL
          # depending on pkg type it will be:
          # rpm
          # - useful:
          #     RPM_VERSION
          #     RPM_BINARIES
          #     RPM_REPO_URL
          #     RPM_VERSION
          # - unuseful:
          #     RPM_PUBLISH_SUCCEEDED
          #     RPM_DISTRO
          #     RPM_CHANGE_REVISION
          #     LP_BUG
          # deb
          # - useful:
          #     DEB_VERSION
          #     DEB_BINARIES
          #     DEB_REPO_URL
          #     RPM_VERSION
          # - unuseful:
          #     DEB_PUBLISH_SUCCEEDED
          #     DEB_DISTRO
          #     DEB_PACKAGENAME
          #     DEB_CHANGE_REVISION
          #     LP_BUG
          properties-file: '{pkg_type}.publish.setenvfile'

      - shell: |
          #!/bin/bash -xe

          # Check parameters required by test script(s)
          : "${{DIST?}}"
          : "${{REPO_TYPE?}}"

          # Prepare parameters for test
          export PACKAGEVERSION=${{DEB_VERSION:-${{RPM_VERSION}}}}
          export PACKAGELIST=${{DEB_BINARIES:-${{RPM_BINARIES}}}}
          export REPO_URL=${{DEB_REPO_URL:-${{RPM_REPO_URL}}}}

          # Remove quotes, double and trailing slashes
          REPO_URL=$(echo "${{REPO_URL}}"   | sed 's|"||g; s|/\+|/|g; s|:|:/|g; s|/ | |g')
          EXTRAREPO=$(echo "${{EXTRAREPO}}" | sed 's|"||g; s|/\+|/|g; s|:|:/|g; s|/ | |g')
          PACKAGELIST=$(echo "${{PACKAGELIST}}" | sed 's|,| |g')

          # it's possible to add additional repos for systests
          case ${{REPO_TYPE?}} in
              deb)
                  if [ ! -z "${{ADDITIONAL_EXTRAREPO_DEB}}" ] ; then
                      export EXTRAREPO="${{EXTRAREPO}}|${{ADDITIONAL_EXTRAREPO_DEB}}"
                  fi
                  ;;
              rpm)
                  if [ ! -z "${{ADDITIONAL_EXTRAREPO_RPM}}" ] ; then
                      export EXTRAREPO="${{EXTRAREPO}}|${{ADDITIONAL_EXTRAREPO_RPM}}"
                  fi
                  ;;
          esac

          for script in version-test-{pkg_type} vm-test
          do
              bash -x "${{WORKSPACE}}/${{script}}"
          done

    publishers:
      - post-tasks:
        - matches:
            - log-text: '/run/shm/'
          script:
            !include-raw-escape:
              'builders/mos.install.destroy.vm.sh'
      - junit:
          results: 'report.xml'
      - archive:
          artifacts: '**/*.xml, {pkg_type}.install.setenvfile'
          allow-empty: true

    node: '{install-node}'

- job-template:
    name: '{project-version}-pkg-{project-name}-repotest-{os}-{distro}'
    project-type: freestyle
    concurrent: true
    parameters:
      - gerrit
    wrappers:
      - timestamps
      - ansicolor
    triggers:
      - zuul
    scm:
      - fuel-infra:
          username: '{username-openstack-ci-jenkins}'
          credentials-id: '{ssh-creds-openstack-ci-jenkins}'
          repo: '{install-scm-repo}'
          branch: '{install-scm-branch}'
          basedir: ''
    builders:
      - shell: rm -vf 'buildresult.params' '{pkg_type}.publish.setenvfile'
      - copyartifact:
          project: '{project-version}-pkg-{project-name}-build-{os}-{distro}'
          filter: 'buildresult.params'
          which-build: last-successful
          parameter-filters: GERRIT_CHANGE_NUMBER=${{GERRIT_CHANGE_NUMBER}},GERRIT_PATCHSET_NUMBER=${{GERRIT_PATCHSET_NUMBER}}
          optional: true
      - copyartifact:
          project: '{project-version}-pkg-{project-name}-publish-{os}-{distro}'
          filter: '{pkg_type}.publish.setenvfile'
          which-build: last-successful
          parameter-filters: GERRIT_CHANGE_NUMBER=${{GERRIT_CHANGE_NUMBER}},GERRIT_PATCHSET_NUMBER=${{GERRIT_PATCHSET_NUMBER}}
          optional: true
      - shell: touch 'buildresult.params' '{pkg_type}.publish.setenvfile'
      - inject-properties-file:
          # Injects EXTRAREPO
          properties-file: 'buildresult.params'
      - inject-properties-file:
          # Injects package lists with version and repository URL
          # depending on pkg type it will be:
          # rpm
          #     RPM_VERSION
          #     RPM_BINARIES
          #     RPM_REPO_URL
          #     RPM_VERSION
          #     RPM_PUBLISH_SUCCEEDED
          #     RPM_DISTRO
          #     RPM_CHANGE_REVISION
          #     LP_BUG
          # deb
          #     DEB_VERSION
          #     DEB_BINARIES
          #     DEB_REPO_URL
          #     RPM_VERSION
          #     DEB_PUBLISH_SUCCEEDED
          #     DEB_DISTRO
          #     DEB_PACKAGENAME
          #     DEB_CHANGE_REVISION
          #     LP_BUG
          properties-file: '{pkg_type}.publish.setenvfile'
      - shell: |
          #!/bin/bash -xe
          export REPO_URL=${{DEB_REPO_URL:-${{RPM_REPO_URL}}}}

          # Remove quotes, double and trailing slashes
          REPO_URL=$(echo "${{REPO_URL}}"   | sed 's|"||g; s|/\+|/|g; s|:|:/|g; s|/ | |g')
          EXTRAREPO=$(echo "${{EXTRAREPO}}" | sed 's|"||g; s|/\+|/|g; s|:|:/|g; s|/ | |g')

          bash -x repo-test-{pkg_type}-docker

    node: '{install-node}'

- job-template:
    name: '{project-version}-pkg-{project-name}-systest-{os}-{distro}'
    concurrent: true
    logrotate:
      artifactDaysToKeep: 90
      daysToKeep: 90
    properties:
      - heavy-job:
          weight: 8
      - inject:
          properties-content: |
            OPENSTACK_RELEASE={openstack_release}
            OS_TYPE={os}
            ENV_PREFIX={mos_version}-pkg-systest-{os}-{distro}

    parameters:
      - string:
          name: TEST_GROUP
          default: 'bvt_2'
      - bool:
          name: NEUTRON_ENABLE
          default: 'true'
      - string:
          name: MIRROR_UBUNTU
          description: >-
            <p>
            If empty, it will be set automatically based on UBUNTU_MIRROR_ID value.
            <p>
            deb http://../ubuntu trusty main universe multiverse|deb
            http://../ubuntu trusty-updates main universe multiverse|deb
            http://../ubuntu trusty-security main universe multiverse|deb
            http://../ubuntu trusty-proposed main universe multiverse
      - string:
          name: EXTRA_DEB_REPOS
          # New lines will become spaces. So don't add newline near "|" because it possibly will break parsing inside scripts
          default: >-
            deb
            http://{repo-host}/{rel-path-prefix}/ubuntu/{mos_version} {deb-dist-name} main restricted,1200|deb
            http://{repo-host}/{rel-path-prefix}/ubuntu/{mos_version} {deb-dist-name}-security main restricted,1201|deb
            http://{repo-host}/{rel-path-prefix}/ubuntu/{mos_version} {deb-dist-name}-proposed main restricted,1202|deb
            http://{repo-host}/{rel-path-prefix}/ubuntu/{mos_version} {deb-dist-name}-updates  main restricted,1201
          description: >-
            <p>
            Additional deb repos. Note, that empty repos will bring some errors into console output.
            But this errors will not break the build.
            <p>
            deb http://... trusty main(,prio1)|deb http://... trusty main(,prio2)
      - string:
          name: EXTRA_DEB_REPOS_PRIORITY
          default: '1052'
      - string:
          name: EXTRA_RPM_REPOS
          default: 'release-repo,http://{repo-host}/{rel-path-prefix}/centos/{main-rpm-dist-name}/os/x86_64/,98'
          description: 'reponame1,http://...(,prio1)|reponame2,http://...(,prio2)'
      - string:
          name: EXTRA_RPM_REPOS_PRIORITY
          default: '1'
      - bool:
          name: DEFAULT_REBUILD_ISO
          default: false
      - bool:
          name: DEFAULT_UPDATE_FUEL
          default: true
    scm:
      - upstream:
          branch: '{fuel-main-branch}'
          repo: fuel-main
          fuel-namespace: '{fuel-namespace}'
      - upstream:
          branch: '{fuel-qa-branch}'
          repo: fuel-qa
          fuel-namespace: '{fuel-namespace}'
    triggers:
      - zuul
      - timed: "H */12 * * *"
    builders:
      - inject:
          # Set defaults which could be reinjected
          properties-content: |
            REBUILD_ISO=$DEFAULT_REBUILD_ISO
            UPDATE_FUEL=$DEFAULT_UPDATE_FUEL

      - shell: |
          #!/bin/bash
          set -ex
          # Clean logs from previous runs
          rm -vf fuel-qa/logs/* *.publish.setenvfile
      - shell: rm -vf 'buildresult.params' '{pkg_type}.publish.setenvfile'
      - shell: /bin/bash -xec 'touch {pkg_type}.publish.setenvfile'

      # This is done for flexibility.
      # We could trigger this job with gerrit parameters and get corresponding artifact.
      # Or we could trigger this job and pass required fields as parameters, so artifact won't be needed
      # 1. remove existing file
      - shell: rm -vf 'buildresult.params'
      # 2. try to copy artifact
      - copyartifact:
          project: '{project-version}-pkg-{project-name}-build-{os}-{distro}'
          filter: 'buildresult.params'
          which-build: last-successful
          parameter-filters: GERRIT_CHANGE_NUMBER=${{GERRIT_CHANGE_NUMBER}},GERRIT_PATCHSET_NUMBER=${{GERRIT_PATCHSET_NUMBER}}
          optional: true
      # 3. touch it, so the file will exist in all cases
      - shell: touch 'buildresult.params'
      # 4. inject file's content: artifact data or nothing
      - inject-properties-file:
          # Inject
          # - useful:
          #     BUILD_HOST
          #     PKG_PATH
          # - unuseful:
          #     DIST
          #     REPO_TYPE
          #     GERRIT_CHANGE_STATUS
          # - maybe useful:
          #     EXTRAREPO
          #     REQUEST_NUM
          #     LP_BUG
          #     IS_SECURITY
          properties-file: 'buildresult.params'

      - copyartifact:
          project: '{project-version}-pkg-{project-name}-publish-{os}-{distro}'
          filter: '{pkg_type}.publish.setenvfile'
          which-build: last-successful
          parameter-filters: GERRIT_CHANGE_NUMBER=${{GERRIT_CHANGE_NUMBER}},GERRIT_PATCHSET_NUMBER=${{GERRIT_PATCHSET_NUMBER}}
          optional: true
      - shell: touch '{pkg_type}.publish.setenvfile'
      - inject-properties-file:
          # Injects package lists with version and repository URL
          # depending on pkg type it will be:
          # rpm
          # - useful:
          #     RPM_VERSION
          #     RPM_BINARIES
          #     RPM_REPO_URL
          #     RPM_VERSION
          # - unuseful:
          #     RPM_PUBLISH_SUCCEEDED
          #     RPM_DISTRO
          #     RPM_CHANGE_REVISION
          #     LP_BUG
          # deb
          # - useful:
          #     DEB_VERSION
          #     DEB_BINARIES
          #     DEB_REPO_URL
          #     RPM_VERSION
          # - unuseful:
          #     DEB_PUBLISH_SUCCEEDED
          #     DEB_DISTRO
          #     DEB_PACKAGENAME
          #     DEB_CHANGE_REVISION
          #     LP_BUG
          properties-file: '{pkg_type}.publish.setenvfile'

      - copyartifact:
          project: 'devops.{mos_version}.env'
          filter: 'fuel_qa_commit.txt,magnet_link.txt,ubuntu_mirror_id.txt'
          which-build: last-successful
      - inject-properties-file:
          # injects variable FUEL_QA_COMMIT
          properties-file: 'fuel_qa_commit.txt'
      - inject-properties-file:
          # injects variable MAGNET_LINK
          properties-file: 'magnet_link.txt'
      - inject-properties-file:
          # injects variable UBUNTU_MIRROR_ID
          properties-file: 'ubuntu_mirror_id.txt'

      - inject:
          properties-content: |
            GUESS_MIRROR={guess-mirror}
            MIRROR_HOST={mirror_host}
            UBUNTU_MIRROR_URL={ubuntu_mirror_url}
            MIRROR_UBUNTU={mirror_ubuntu}
      - guess-mirror

      - inject:
          # when started by zuul, then parameters defaults are not applied
          # when started by jenkins inject will not override parameters
          properties-content: |
            EXTRA_RPM_REPOS_PRIORITY=1
            EXTRA_DEB_REPOS_PRIORITY=1052
      - shell:
          !include-raw-escape:
            'builders/system_test.sh'

    wrappers:
      - timeout:
          fail: true
          timeout: 210
      - timestamps
      - ansicolor

    publishers:
      - archive:
          allow-empty: true
          artifacts: '**/nosetests.xml, logs/*, fuel-qa/logs/*'
          latest-only: false
      - logparser:
          parse-rules: '/var/lib/jenkins/fuellib.parser'
          unstable-on-warning: false
          fail-on-error: false
      - junit:
          keep-long-stdio: false
          results: '**/nosetests.xml'

    node: '{systest-node}'
