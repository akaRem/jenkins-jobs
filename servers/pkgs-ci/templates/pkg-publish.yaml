- job-template:
    name: '{project-version}-pkg-{project-name}-publish-{os}-{distro}'
    project-type: freestyle
    concurrent: false
    quiet-period: 60
    parameters:
      - gerrit
    properties:
      - inject:
          properties-content: |
            PROJECT_NAME={project-name}
            PROJECT_VERSION={project-version}

            IS_UPDATES={is-updates}

            IS_DOWNGRADE={is-downgrade}

            DIST={distro}
            REPO_TYPE={pkg_type}

            SIGKEYID={pkg-sign-key}

            REMOTE_REPO_HOST={publish-repo-host}
            REPO_REQUEST_PATH_PREFIX=review/
            REPO_BASE_PATH={repo-base-path}

            DEB_REPO_PATH={deb-repo-path}/{project-version}
            DEB_DIST_NAME={deb-dist-name}
            DEB_PROPOSED_DIST_NAME={deb-dist-name}-proposed
            DEB_UPDATES_DIST_NAME={deb-dist-name}-updates
            DEB_SECURITY_DIST_NAME={deb-dist-name}-security
            DEB_HOLDBACK_DIST_NAME={deb-dist-name}-holdback

            RPM_OS_REPO_PATH={rpm-repo-path}/os
            RPM_UPDATES_REPO_PATH={rpm-repo-path}/updates
            RPM_PROPOSED_REPO_PATH={rpm-repo-path}/proposed
            RPM_SECURITY_REPO_PATH={rpm-repo-path}/security
            RPM_HOLDBACK_REPO_PATH={rpm-repo-path}/holdback

            DEB_ORIGIN_RELEASE={deb-origin-release}
            DEB_ORIGIN_TEST={deb-origin-test}

            PKG_JSON_REPORT=/home/jenkins/{project-version}-pkg-{project-name}-versions.json
    wrappers:
      - ssh-agent-credentials:
          users:
            - '{ssh-creds-jenkins}'
      - timestamps
      - ansicolor
    triggers:
      - zuul
    scm:
      - perestroika:
          branch: 'stable/mitaka'

    builders:

      # This is done for flexibility.
      # We could trigger this job with gerrit parameters and get corresponding artifact.
      # Or we could trigger this job and pass required fields as parameters, so artifact won't be needed
      # 1. remove existing file
      - shell: rm -vf 'buildresult.params'
      # 2. try to copy artifact
      - copyartifact:
          project: '{project-version}-pkg-{project-name}-build-{os}-{distro}'
          filter: 'buildresult.params'
          which-build: last-successful
          parameter-filters: GERRIT_CHANGE_NUMBER=${{GERRIT_CHANGE_NUMBER}},GERRIT_PATCHSET_NUMBER=${{GERRIT_PATCHSET_NUMBER}}
          optional: true
      # 3. touch it, so the file will exist in all cases
      - shell: touch 'buildresult.params'
      # 4. inject file's content: artifact data or nothing
      - inject-properties-file:
          # Inject
          # - useful:
          #     BUILD_HOST
          #     PKG_PATH
          # - unuseful:
          #     DIST
          #     REPO_TYPE
          #     GERRIT_CHANGE_STATUS
          # - maybe useful:
          #     EXTRAREPO
          #     REQUEST_NUM
          #     LP_BUG
          #     IS_SECURITY
          properties-file: 'buildresult.params'

      - shell:
          !include-raw-escape:
            '../builders/pkg_publish.sh'

    publishers:
      - pkg-version-report
      - archive:
           artifacts: '{pkg_type}.publish.setenvfile, tests.envfile'
           allow-empty: true

    node: '{publish-node}'