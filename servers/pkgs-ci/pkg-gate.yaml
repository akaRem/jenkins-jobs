################################################################################
# Job Templates
################################################################################

- job-template:
    name: '{mos_version}-pkg-gate'
    concurrent: True
    description: |
        This job parses set of Zuul parameters (ZUUL_CHANGE_IDS and ZUUL_CHANGES) and runs build job
        for each pair.
    properties:
      - throttle:
          option: project
          max-per-node: 7
    wrappers:
      - gerrit-creds
      - timestamps
      - ansicolor
      - timeout:
          timeout: 3600
    triggers:
      - zuul
    builders:
      - shell: |
          #!/bin/bash -xe

          ############################
          # Prepare parameters for slave jobs
          ############################

          # Gerrit parameters
          export GERRIT_HOST=${{GERRIT_HOST:-{gerrit-host}}}
          export GERRIT_PORT=${{GERRIT_PORT:-{gerrit-port}}}
          export GERRIT_USER=${{GERRIT_USER:-{gerrit-user}}}

          # Regexes for files to skip CentOS
          FILES_SKIP_CENTOS=( "^\." "^debian/" "^trusty/debian/" )
          RE_OPT_CENTOS=""

          # Regexes for files to skip Ubuntu
          FILES_SKIP_UBUNTU=( "^\." "^rpm/" "^centos\d/" )
          RE_OPT_UBUNTU=""

          # Generate command line options for grep to skip CentOS
          for RE in ${{FILES_SKIP_CENTOS[*]}}; do
            RE_OPT_CENTOS="${{RE_OPT_CENTOS}} -e ${{RE}}"
          done

          # Generate command line options for grep to skip Ubuntu
          for RE in ${{FILES_SKIP_UBUNTU[*]}}; do
            RE_OPT_UBUNTU="${{RE_OPT_UBUNTU}} -e ${{RE}}"
          done

          # Branch of currently testing patchset
          TESTING_BRANCH=${{ZUUL_BRANCH#openstack-ci/fuel-}}
          TESTING_BRANCH=${{TESTING_BRANCH%%/*}}

          declare -a CHANGE_IDS
          declare -a CHANGES

          # Array of chande IDs
          CHANGE_IDS=( ${{ZUUL_CHANGE_IDS}} )

          # Array of changes (project:branch:refspec)
          # Save input field separator
          OLDIFS=${{IFS}}

          # Split change info
          IFS="^"
          CHANGES=( ${{ZUUL_CHANGES}} )

          # Restore input field separator
          IFS=${{OLDIFS}}

          # Remove parameter files from previous jobs
          rm -vf build-param-*.setenvfile

          # Create parameter files
          for i in ${{!CHANGE_IDS[*]}}; do

          OLDIFS=${{IFS}}
          IFS=":"
          CH=( ${{CHANGES[${{i}}]}} )
          IFS=${{OLDIFS}}

          # Branch of other(s) patchset(s)
          CHANGE_BRANCH=${{CH[1]#openstack-ci/fuel-}}
          CHANGE_BRANCH=${{CHANGE_BRANCH%%/*}}

          # Skip patchset if it's branch is not same as branch of currently testing patchset
          if [ "${{CHANGE_BRANCH}}" != "${{TESTING_BRANCH}}" ]; then
              echo "Skip patchset #${{CHANGE_IDS[${{i}}]#*,}} of change ${{CHANGE_IDS[${{i}}]%,*}} in project ${{CH[0]}} (branch ${{CH[1]}})"
              continue
          fi

          echo "Preparing parameters for patchset #${{CHANGE_IDS[${{i}}]#*,}} of change ${{CHANGE_IDS[${{i}}]%,*}} in project ${{CH[0]}} (branch ${{CH[1]}})"

          # Get CR info from Gerrit
          GERRIT_CMD="gerrit query --current-patch-set --files ${{CHANGE_IDS[${{i}}]%,*}}"
          CHANGE_INFO=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{GERRIT_PORT}} ${{GERRIT_USER}}@${{GERRIT_HOST}} "${{GERRIT_CMD}}")
          TOPIC=$(awk '$1 == "topic:" {{print $2}}' <<< "${{CHANGE_INFO}}")
          REVISION=$(awk '$1 == "revision:" {{print $2}}' <<< "${{CHANGE_INFO}}")

          # Define projects paths
          # This paths are required by perestorika for checkouting projects from git

          # Strip project name to get path only
          SRC_PROJECT_PATH=${{CH[0]%/*}}
          # Strip spec path prefix if any
          SRC_PROJECT_PATH=${{SRC_PROJECT_PATH#{spec-path-prefix}}}
          # Strip spec path suffix if any
          SRC_PROJECT_PATH=${{SRC_PROJECT_PATH%{spec-path-suffix}}}
          # Define spec project path using prefix and suffix
          SPEC_PROJECT_PATH={spec-path-prefix}${{SRC_PROJECT_PATH}}{spec-path-suffix}

          PACKAGENAME=${{CH[0]##*/}}
          PACKAGENAME=${{PACKAGENAME%{spec-project-suffix}}}
          SRC_PROJECT=${{SRC_PROJECT_PATH}}/${{PACKAGENAME}}

          SOURCE_REFSPEC=${{CH[2]}}

          # Set flag for openstack projects
          # Required to use paired projects src+spec
          if [ "${{SRC_PROJECT_PATH}}" = "openstack" ]; then
              IS_OPENSTACK=true
              SPEC_PROJECT=${{SPEC_PROJECT_PATH}}/{spec-project-prefix}${{PACKAGENAME}}{spec-project-suffix}
              if [ "${{CH[0]}}" = "${{SRC_PROJECT}}" ]; then
                  GERRIT_CMD="gerrit query --current-patch-set topic:${{TOPIC}} branch:${{CH[1]}} project:${{SPEC_PROJECT}} NOT status:abandoned"
                  BOUND_INFO=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{GERRIT_PORT}} ${{GERRIT_USER}}@${{GERRIT_HOST}} "${{GERRIT_CMD}}")
                  BOUND_REFSPEC=$(awk '$1 == "ref:" {{print $2}}' <<< "${{BOUND_INFO}}")
                  SPEC_REFSPEC=${{BOUND_REFSPEC}}
              else
                  SPEC_REFSPEC=${{CH[2]}}
                  GERRIT_CMD="gerrit query --current-patch-set topic:${{TOPIC}} branch:${{CH[1]}} project:${{SRC_PROJECT}} NOT status:abandoned"
                  BOUND_INFO=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{GERRIT_PORT}} ${{GERRIT_USER}}@${{GERRIT_HOST}} "${{GERRIT_CMD}}")
                  BOUND_REFSPEC=$(awk '$1 == "ref:" {{print $2}}' <<< "${{BOUND_INFO}}")
                  SOURCE_REFSPEC=${{BOUND_REFSPEC}}
              fi
              if [ $(echo "${{BOUND_REFSPEC}}" | wc -l) -gt 1 ]; then
                  echo "ERROR: Multiple corresponding changes found!"
                  exit 1
              fi
          else
              IS_OPENSTACK=false
              unset SPEC_PROJECT
              unset SPEC_REFSPEC
          fi

          # Get list of changed files
          FILE_LIST=$(awk '$1 == "file:" && $2 != "/COMMIT_MSG" {{print $2}}' <<< "${{CHANGE_INFO}}")

          # Build RPM if not matches skip list for CentOS
          echo "${{FILE_LIST}}" | grep -q -E ${{RE_OPT_CENTOS}} || PKG_CENTOS="centos"

          # Build DEB if not matches skip list for CentOS
          echo "${{FILE_LIST}}" | grep -q -E ${{RE_OPT_UBUNTU}} || PKG_UBUNTU="ubuntu"

          # Skip builds basing on project name
          case ${{CH[0]}} in
            packages/centos*)
              unset PKG_UBUNTU
            ;;
            packages/trusty*)
              unset PKG_CENTOS
            ;;
          esac

          for OS in ${{PKG_CENTOS}} ${{PKG_UBUNTU}}; do
          echo "Will build package for ${{OS}}"
          cat > build-param-${{CHANGE_IDS[${{i}}]}}-${{OS}}.setenvfile <<EOF
          # Basic required Gerrit parameters
          GERRIT_BRANCH=${{CH[1]}}
          GERRIT_PATCHSET_REVISION=${{REVISION}}

          # Required by publisher to decide where to publish package, test or release repo
          GERRIT_CHANGE_STATUS=NEW

          # Gerrit topic is required for linked changes to openstack projects (src+spec)
          GERRIT_TOPIC=${{TOPIC}}

          # Zuul parameters
          ZUUL_PROJECT=${{CH[0]}}
          ZUUL_BRANCH=${{CH[1]}}
          ZUUL_CHANGE=${{CHANGE_IDS[${{i}}]%,*}}
          ZUUL_PATCHSET=${{CHANGE_IDS[${{i}}]#*,}}
          ZUUL_CHANGE_IDS=${{CHANGE_IDS[${{i}}]}}
          ZUUL_CHANGES=${{CHANGES[${{i}}]}}
          ZUUL_COMMIT=${{REVISION}}
          ZUUL_UUID=${{ZUUL_UUID}}

          # Will be used for repository naming
          REQUEST_NUM=GATE-${{ZUUL_CHANGE}}-${{ZUUL_UUID}}

          # Basic project parameters
          PACKAGENAME=${{PACKAGENAME}}
          SRC_PROJECT=${{SRC_PROJECT}}
          SRC_PROJECT_PATH=${{SRC_PROJECT_PATH}}
          SOURCE_BRANCH=${{CH[1]}}
          SOURCE_REFSPEC=${{SOURCE_REFSPEC}}

          # Openstack project parameters
          IS_OPENSTACK=${{IS_OPENSTACK}}
          SPEC_PROJECT_PATH=${{SPEC_PROJECT_PATH}}
          SPEC_PROJECT=${{SPEC_PROJECT}}
          SPEC_BRANCH=${{CH[1]}}
          SPEC_REFSPEC=${{SPEC_REFSPEC}}

          # Don't post links to repositories because gating builds several projects/packages
          POST_REPO_LINK=false

          # Used for linking builds
          TRIGGERED_BY=${{BUILD_TAG}}

          # Because job is not triggerred by zuul with parameters, perestroika must set parameters by itself
          SKIP_DEF_PARAMS=false

          # Don't use for gating shared repositories based on LP bug
          UNSET_LP_BUG=true
          EOF
          done

          done

      - trigger-builds:
          - project: '{mos_version}-pkg-pipeline-centos'
            current-parameters: false
            block: true
            parameter-factories:
              - factory: filebuild
                file-pattern: 'build-param-*-centos.setenvfile'
          - project: '{mos_version}-pkg-pipeline-ubuntu'
            current-parameters: false
            block: true
            parameter-factories:
              - factory: filebuild
                file-pattern: 'build-param-*-ubuntu.setenvfile'
    publishers:
      - archive:
          artifacts: 'build-param-*.setenvfile'
          allow-empty: True

    node: '{build-node}'

################################################################################
# Job Groups
################################################################################
